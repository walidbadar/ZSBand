#
# Copyright (c) 2025, Muhammad Waleed Badar
#
# SPDX-License-Identifier: Apache-2.0
#
# Renesas Smartbond DA1469x: ARM Cortex-M33, SWD interface
#

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

# Basic chip configuration
set CHIPNAME da14697
set WORKAREASIZE 0x4000
set CPUTAPID 0x6ba02477

# Memory map
set _FLASH_BASE 0x16000000
set _FLASH_SIZE 0x1000000
set FLASH_CTRL_BASE 0x38000000
set SECTOR_SIZE 0x1000

# Key register offsets
set FLASH_CTRL_CTRL_REG 0x00
set FLASH_CTRL_UNLOCK_REG 0x20
set FLASH_CTRL_ADDRESS_REG 0x08
set FLASH_CTRL_ERASE_REG 0x0C
set FLASH_CTRL_DATA_REG 0x14
set FLASH_CTRL_WRITE_REG 0x10
set FLASH_CTRL_STATUS_REG 0x30
set QSPIC_CTRLBUS_BASE 0x38400000
set QSPIC_CTRLBUS_WRITEPROTECTION_REG 0x18

# Initialize debug interface
swj_newdap $CHIPNAME cpu -expected-id $CPUTAPID
dap create $CHIPNAME.dap -chain-position $CHIPNAME.cpu

# Target configuration
set _TARGETNAME $CHIPNAME.cpu
target create $_TARGETNAME cortex_m -dap $CHIPNAME.dap
$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $WORKAREASIZE -work-area-backup 0
$_TARGETNAME cortex_m reset_config sysresetreq

# Basic flash operations
proc da1469x_init_flash {} {
    global FLASH_CTRL_BASE FLASH_CTRL_STATUS_REG FLASH_CTRL_UNLOCK_REG FLASH_CTRL_CTRL_REG
    global QSPIC_CTRLBUS_BASE QSPIC_CTRLBUS_WRITEPROTECTION_REG
    
    echo "Initializing flash controller..."
    
    # Halt the CPU
    halt
    
    # Clear any errors
    mww [expr {$FLASH_CTRL_BASE + $FLASH_CTRL_STATUS_REG}] 0xFFFFFFFF
    
    # Unlock flash
    mww [expr {$FLASH_CTRL_BASE + $FLASH_CTRL_UNLOCK_REG}] 0xA5A5A5A5
    
    # Disable write protection
    mww [expr {$QSPIC_CTRLBUS_BASE + $QSPIC_CTRLBUS_WRITEPROTECTION_REG}] 0x0
    
    # Set flash controller configuration
    mww [expr {$FLASH_CTRL_BASE + $FLASH_CTRL_CTRL_REG}] 0x40
    
    echo "Flash controller initialized"
}

proc da1469x_wait_flash_ready {} {
    global FLASH_CTRL_BASE FLASH_CTRL_STATUS_REG
    
    # Wait for FLASH_STAT_BUSY bit (bit 0) to clear
    for {set i 0} {$i < 100} {incr i} {
        set status [mrw [expr {$FLASH_CTRL_BASE + $FLASH_CTRL_STATUS_REG}]]
        
        # Check if flash is ready (bit 0 = 0)
        if {($status & 0x1) == 0} {
            return 1
        }
        
        sleep 10
    }
    
    set status [mrw [expr {$FLASH_CTRL_BASE + $FLASH_CTRL_STATUS_REG}]]
    echo "Flash timeout, status: 0x[format %08x $status]"
    return 0
}

proc da1469x_erase_sector {offset} {
    global FLASH_CTRL_BASE _FLASH_BASE FLASH_CTRL_ADDRESS_REG FLASH_CTRL_ERASE_REG SECTOR_SIZE
    
    set address [expr {$_FLASH_BASE + $offset}]
    echo "Erasing sector at 0x[format %08x $address]"
    
    # Check sector alignment
    if {[expr {$offset & ($SECTOR_SIZE - 1)}] != 0} {
        error "Erase offset must be sector-aligned (multiple of 0x[format %X $SECTOR_SIZE])"
        return 0
    }
    
    # Set address and trigger erase
    mww [expr {$FLASH_CTRL_BASE + $FLASH_CTRL_ADDRESS_REG}] $address
    mww [expr {$FLASH_CTRL_BASE + $FLASH_CTRL_ERASE_REG}] 0x1
    
    # Wait for completion
    if {![da1469x_wait_flash_ready]} {
        error "Erase operation failed or timed out"
        return 0
    }
    
    echo "Sector erased successfully"
    return 1
}

proc da1469x_write_word {address data} {
    global FLASH_CTRL_BASE FLASH_CTRL_DATA_REG FLASH_CTRL_ADDRESS_REG FLASH_CTRL_WRITE_REG
    
    # Check address alignment
    if {[expr {$address & 0x3}] != 0} {
        error "Address must be 4-byte aligned"
        return 0
    }
    
    # Program word
    mww [expr {$FLASH_CTRL_BASE + $FLASH_CTRL_ADDRESS_REG}] $address
    mww [expr {$FLASH_CTRL_BASE + $FLASH_CTRL_DATA_REG}] $data
    mww [expr {$FLASH_CTRL_BASE + $FLASH_CTRL_WRITE_REG}] 0x1
    
    return [da1469x_wait_flash_ready]
}

proc da1469x_write_flash {filename {offset 0} {verify 1}} {
    global _FLASH_BASE SECTOR_SIZE
    set address [expr {$_FLASH_BASE + $offset}]
    echo "Programming $filename to 0x[format %08x $address]"
    
    # Initialize flash
    da1469x_init_flash
    
    # Open binary file
    set f [open $filename rb]
    fconfigure $f -translation binary
    
    # Get file size
    seek $f 0 end
    set file_size [tell $f]
    seek $f 0 start
    
    echo "File size: $file_size bytes"
    
    # Calculate required sectors
    set start_sector [expr {$offset & ~($SECTOR_SIZE - 1)}]
    set end_offset [expr {$offset + $file_size - 1}]
    set end_sector [expr {$end_offset & ~($SECTOR_SIZE - 1)}]
    
    # Erase all required sectors
    for {set sec $start_sector} {$sec <= $end_sector} {incr sec $SECTOR_SIZE} {
        da1469x_erase_sector $sec
    }
    
    # Program data in 4-byte words
    set current_address $address
    set data [read $f]
    close $f
    
    for {set i 0} {$i < $file_size} {incr i 4} {
        # Process complete words
        if {$i + 4 <= $file_size} {
            set byte0 [expr {[scan [string index $data $i] %c] & 0xFF}]
            set byte1 [expr {[scan [string index $data [expr {$i+1}]] %c] & 0xFF}]
            set byte2 [expr {[scan [string index $data [expr {$i+2}]] %c] & 0xFF}]
            set byte3 [expr {[scan [string index $data [expr {$i+3}]] %c] & 0xFF}]
            
            # Combine into word (little-endian)
            set word [expr {$byte0 | ($byte1 << 8) | ($byte2 << 16) | ($byte3 << 24)}]
            
            # Program word
            da1469x_write_word $current_address $word
            
            # Verify if requested
            if {$verify} {
                set read_value [mrw $current_address]
                if {$read_value != $word} {
                    echo "Verification failed at 0x[format %08x $current_address]: expected 0x[format %08x $word], got 0x[format %08x $read_value]"
                }
            }
            
            # Update address
            set current_address [expr {$current_address + 4}]
        } elseif {$i < $file_size} {
            # Handle partial word at end
            set remaining [expr {$file_size - $i}]
            set word 0
            
            for {set j 0} {$j < $remaining} {incr j} {
                set byte [expr {[scan [string index $data [expr {$i+$j}]] %c] & 0xFF}]
                set word [expr {$word | ($byte << ($j * 8))}]
            }
            
            # Program partial word
            da1469x_write_word $current_address $word
            
            # Verify if requested (with mask for partial word)
            if {$verify} {
                set mask [expr {(1 << ($remaining * 8)) - 1}]
                set read_value [mrw $current_address]
                if {($read_value & $mask) != $word} {
                    echo "Verification failed at 0x[format %08x $current_address]: expected 0x[format %08x $word], got 0x[format %08x [expr {$read_value & $mask}]]"
                }
            }
        }
    }
    
    echo "Programming complete"
    return 1
}

proc da1469x_verify_binary {filename {offset 0}} {
    global _FLASH_BASE
    set address [expr {$_FLASH_BASE + $offset}]
    echo "Verifying $filename at 0x[format %08x $address]"
    
    # Open binary file
    set f [open $filename rb]
    fconfigure $f -translation binary
    
    # Read file content
    set data [read $f]
    close $f
    set file_size [string length $data]
    
    # Verify word by word
    set current_address $address
    set mismatch_count 0
    
    for {set i 0} {$i < $file_size} {incr i 4} {
        if {$i + 4 <= $file_size} {
            # Read expected word from file
            set byte0 [expr {[scan [string index $data $i] %c] & 0xFF}]
            set byte1 [expr {[scan [string index $data [expr {$i+1}]] %c] & 0xFF}]
            set byte2 [expr {[scan [string index $data [expr {$i+2}]] %c] & 0xFF}]
            set byte3 [expr {[scan [string index $data [expr {$i+3}]] %c] & 0xFF}]
            set expected_word [expr {$byte0 | ($byte1 << 8) | ($byte2 << 16) | ($byte3 << 24)}]
            
            # Read actual word from memory
            set actual_word [mrw $current_address]
            
            # Compare
            if {$actual_word != $expected_word} {
                echo "Mismatch at 0x[format %08x $current_address]: expected 0x[format %08x $expected_word], got 0x[format %08x $actual_word]"
                incr mismatch_count
            }
            
            set current_address [expr {$current_address + 4}]
        } elseif {$i < $file_size} {
            # Handle partial word at end
            set remaining [expr {$file_size - $i}]
            set expected_word 0
            
            for {set j 0} {$j < $remaining} {incr j} {
                set byte [expr {[scan [string index $data [expr {$i+$j}]] %c] & 0xFF}]
                set expected_word [expr {$expected_word | ($byte << ($j * 8))}]
            }
            
            # Read actual word with mask
            set mask [expr {(1 << ($remaining * 8)) - 1}]
            set actual_word [expr {[mrw $current_address] & $mask}]
            
            # Compare
            if {$actual_word != $expected_word} {
                echo "Mismatch at 0x[format %08x $current_address]: expected 0x[format %08x $expected_word], got 0x[format %08x $actual_word]"
                incr mismatch_count
            }
        }
    }
    
    if {$mismatch_count == 0} {
        echo "Verification successful"
        return 1
    } else {
        echo "Verification failed with $mismatch_count mismatches"
        return 0
    }
}

proc da1469x_blank_check {start_offset length} {
    global _FLASH_BASE
    set address [expr {$_FLASH_BASE + $start_offset}]
    set end_address [expr {$address + $length}]
    echo "Performing blank check from 0x[format %08x $address] to 0x[format %08x $end_address]"
    
    set is_blank 1
    for {set addr $address} {$addr < $end_address} {incr addr 4} {
        set value [mrw $addr]
        if {$value != 0xFFFFFFFF} {
            echo "Non-blank word at 0x[format %08x $addr]: 0x[format %08x $value]"
            set is_blank 0
            break
        }
    }
    
    if {$is_blank} {
        echo "Region is blank (all 0xFF)"
        return 1
    } else {
        echo "Region is not blank"
        return 0
    }
}

# Target initialization
$_TARGETNAME configure -event reset-init {
    echo "Initializing DA1469x..."
    halt
    da1469x_init_flash
}

# Add help text
add_help_text da1469x_write_flash "Program flash with binary file: filename ?offset? ?verify?"
add_help_text da1469x_erase_sector "Erase a flash sector at given offset (must be sector-aligned)"
add_help_text da1469x_verify_binary "Verify flash content against binary file: filename ?offset?"
add_help_text da1469x_blank_check "Check if a flash region is blank/erased: start_offset length"